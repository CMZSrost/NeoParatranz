# generated by datamodel-codegen:
#   filename:  paratranz.json
#   timestamp: 2025-06-30T15:14:10+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field, conint

class File(BaseModel):
    id: Optional[conint(ge=1)] = Field(None, example=421)
    createdAt: Optional[datetime] = Field(None, description='文件创建时间')
    updatedAt: Optional[datetime] = Field(
        None, description='文件更新时间（上传文件时更新），默认为创建时间'
    )
    modifiedAt: Optional[datetime] = Field(
        None,
        description='文件修改时间（词条修改时更新），默认为创建时间；可利用此字段判断文件中词条是否有更新',
    )
    name: Optional[str] = Field(None, example='path/to/filename.csv')
    project: Optional[conint(ge=1)] = Field(None, example=1)
    format: Optional[str] = Field(
        None, description='文件格式，由系统自动计算', example='ssv'
    )
    total: Optional[int] = Field(None, description='文件总词条数', example=1453)
    translated: Optional[int] = Field(None, description='已翻译词条数', example=1452)
    disputed: Optional[int] = Field(None, description='有疑问的词条数', example=2)
    checked: Optional[int] = Field(None, description='已检查的词条数', example=841)
    reviewed: Optional[int] = Field(None, description='已审核的词条数', example=272)
    hidden: Optional[int] = Field(None, description='已隐藏的词条数', example=2)
    locked: Optional[int] = Field(None, description='已锁定的词条数', example=1)
    words: Optional[int] = Field(None, description='总词数', example=6421)
    hash: Optional[str] = Field(
        None,
        description='上一次文件更新或创建时的原文件哈希值',
        example='928ca86273fd6ea36f0eebd4405eb85e',
    )


class Target(BaseModel):
    key: Optional[str] = None
    original: Optional[str] = None
    translation: Optional[str] = None
    stage: Optional[int] = None


class Operation(Enum):
    translate = 'translate'
    edit = 'edit'
    reset = 'reset'
    dispute = 'dispute'
    review = 'review'
    rollback = 'rollback'
    lock = 'lock'
    hide = 'hide'


class History(BaseModel):
    id: Optional[int] = None
    createdAt: Optional[datetime] = None
    field: Optional[str] = Field(None, description='修改的字段', example='translation')
    uid: Optional[int] = None
    user: Optional[Dict[str, Any]] = Field(None, description='操作者用户详情')
    tid: Optional[int] = Field(None, description='词条ID', example=332315)
    from_: Optional[str] = Field(
        None, alias='from', description='修改前的值', example='这是上帝的意志！'
    )
    to: Optional[str] = Field(
        None, description='修改后的值', example='这是上帝的旨意！'
    )
    target: Optional[Target] = Field(
        None,
        description='修改后词条的完整数据',
        example='{"key": "aaa.bbb", "stage": 1, "original": "It was the will of God!", "translation": "这是上帝的旨意！"}',
    )
    operation: Optional[Operation] = Field(
        None, description='历史记录操作类型', example='edit'
    )


class Project(BaseModel):
    id: Optional[int] = None
    createdAt: Optional[datetime] = Field(None, description='项目创建时间')
    updatedAt: Optional[datetime] = Field(None, description='项目修改时间')
    uid: Optional[int] = Field(None, description='所有者用户ID')
    user: Optional[Dict[str, Any]] = Field(None, description='所有者用户信息')
    name: Optional[str] = Field(None, description='项目名称')
    logo: Optional[AnyUrl] = Field(None, description='项目LOGO链接')
    desc: Optional[str] = Field(None, description='项目说明')
    source: Optional[str] = Field(None, description='源语言')
    dest: Optional[str] = Field(None, description='目标语言')
    members: Optional[int] = Field(None, description='成员数量')
    game: Optional[str] = Field(None, description='所属游戏', example='ck2')
    license: Optional[str] = Field(None, description='项目使用的许可证')
    activeLevel: Optional[float] = Field(None, description='项目活跃度')
    stage: Optional[int] = Field(None, description='项目状态')
    privacy: Optional[int] = Field(
        None,
        description='项目隐私状态 * 0 - 公开 * 1 - 内部（项目公开但动态及文件私密） * 2 - 私密\n',
    )
    download: Optional[int] = Field(
        None, description='下载权限 * 0 - 公开 * 1 - 内部 * 2 - 私密\n'
    )
    issueMode: Optional[int] = Field(
        None,
        description='讨论权限 * 0 - 公开（所有用户都可以创建及加入讨论） * 1 - 内部（仅项目成员可以创建讨论但所有用户都可以加入） * 2 - 私密（仅项目成员可以创建及加入讨论）\n',
    )
    reviewMode: Optional[int] = Field(
        None, description='校对等级 * 0 - 无须校对 * 1 - 一次校对 * 2 - 二次校对\n'
    )
    joinMode: Optional[int] = Field(
        None,
        description='加入方式 * 0 - 公开（所有用户都可以直接加入项目） * 1 - 申请（加入项目需提交申请） * 2 - 测试（加入项目需完成测试） * 3 - 私密（仅管理员可添加成员）\n',
    )


class Artifact(BaseModel):
    id: Optional[int] = None
    createdAt: Optional[datetime] = None
    project: Optional[int] = None
    total: Optional[int] = Field(None, description='导出时项目词条总条数')
    translated: Optional[int] = Field(None, description='导出时项目词条已翻译的条数')
    disputed: Optional[int] = Field(None, description='导出时项目词条有疑问的条数')
    reviewed: Optional[int] = Field(None, description='导出时项目词条已审核的条数')
    hidden: Optional[int] = Field(None, description='导出时项目词条已隐藏的条数')
    duration: Optional[int] = Field(None, description='导出压缩包所用的时间 (ms)')
